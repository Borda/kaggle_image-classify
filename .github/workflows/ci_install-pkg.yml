name: Install package

# see: https://help.github.com/en/actions/reference/events-that-trigger-workflows
on:  # Trigger the workflow on push or pull request, but only for the main branch
  push:
    branches: [main]
  pull_request: {}

jobs:
  pkg-check:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Check package
        run: |
          pip install check-manifest
          check-manifest
          python setup.py check --metadata --strict

      - name: Create package
        run: |
          pip install --upgrade setuptools wheel
          python setup.py sdist bdist_wheel

      - name: Verify package
        run: |
          pip install -q "twine==5.1.*"
          twine check dist/*
          python setup.py clean

  pkg-install:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-22.04", "macOS-13", "windows-2022"]
        python-version: ["3.9"]  # because of Kaggle
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create package
        run: |
          pip install setuptools wheel
          python setup.py sdist bdist_wheel

      - name: Try installing
        working-directory: dist
        run: |
          ls
          pip install $(python -c "import glob ; print(' '.join(glob.glob('*.whl')))")
          pip show kaggle-image-classification
          python -c "from kaggle_imgclassif import plant_pathology ; print(plant_pathology.__version__)"
          python -c "from kaggle_imgclassif import imet_collect ; print(imet_collect.__version__)"
          python -c "from kaggle_imgclassif import cassava ; print(cassava.__version__)"
          python -c "from kaggle_imgclassif import birdclef ; print(birdclef.__version__)"

  install-guardian:
    runs-on: ubuntu-latest
    needs: [pkg-install, pkg-check]
    if: always()
    steps:
      - run: echo "${{ needs.pkg-install.result }}"
      - name: failing...
        if: needs.pkg-install.result == 'failure'
        run: exit 1
      - name: cancelled or skipped...
        if: contains(fromJSON('["cancelled", "skipped"]'), needs.pkg-install.result)
        timeout-minutes: 1
        run: sleep 90
